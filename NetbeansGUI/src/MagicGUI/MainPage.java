/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package MagicGUI;

import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Logger;
import java.util.logging.Level;
import javax.swing.ComboBoxModel;

/**
 *
 * @author bellaceds
 */

public class MainPage extends javax.swing.JFrame {

    /**
     * Creates new form MainPage
     */
    
        Connection conn;
        Statement stmt;
        ResultSet rs;
        CallableStatement cs;
        List<String> results = new ArrayList<>();
                                
    
    public MainPage() {
        initComponents();

        Connection conn;
        Statement stmt;
        ResultSet rs;
        CallableStatement cs;
                
        extraBox1.setVisible(false);
        extraBox2.setVisible(false);
        subtypeSearch.setVisible(false);
        label1.setVisible(false);
        label2.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cardNameText = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        costDropDown = new javax.swing.JComboBox<>();
        typeComboBox = new javax.swing.JComboBox<>();
        TypeLabel = new javax.swing.JLabel();
        subtypeSearch = new javax.swing.JTextField();
        Cost = new javax.swing.JLabel();
        extraBox1 = new javax.swing.JComboBox<>();
        extraBox2 = new javax.swing.JComboBox<>();
        label1 = new javax.swing.JLabel();
        label2 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setSize(new java.awt.Dimension(84, 84));
        getContentPane().setLayout(null);

        cardNameText.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cardNameTextFocusGained(evt);
            }
        });
        cardNameText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cardNameTextActionPerformed(evt);
            }
        });
        getContentPane().add(cardNameText);
        cardNameText.setBounds(12, 41, 366, 45);

        jButton1.setText("Go");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1);
        jButton1.setBounds(457, 523, 138, 52);

        costDropDown.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "no preference", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9" }));
        costDropDown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                costDropDownActionPerformed(evt);
            }
        });
        getContentPane().add(costDropDown);
        costDropDown.setBounds(12, 401, 366, 40);

        typeComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Unspecified", "Artifacts", "Creatures", "Enchantments", "Instants", "Lands", "Planeswalker", "Sorceries" }));
        typeComboBox.setMaximumSize(new java.awt.Dimension(366, 45));
        typeComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                typeComboBoxActionPerformed(evt);
            }
        });
        getContentPane().add(typeComboBox);
        typeComboBox.setBounds(12, 132, 366, 45);

        TypeLabel.setText("Type");
        getContentPane().add(TypeLabel);
        TypeLabel.setBounds(12, 94, 978, 31);

        subtypeSearch.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                subtypeSearchFocusGained(evt);
            }
        });
        subtypeSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                subtypeSearchActionPerformed(evt);
            }
        });
        getContentPane().add(subtypeSearch);
        subtypeSearch.setBounds(457, 132, 318, 45);

        Cost.setText("Cost");
        getContentPane().add(Cost);
        Cost.setBounds(12, 378, 366, 16);

        extraBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Unspecified", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10" }));
        extraBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                extraBox1ActionPerformed(evt);
            }
        });
        getContentPane().add(extraBox1);
        extraBox1.setBounds(12, 224, 366, 44);

        extraBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Unspecified", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10" }));
        extraBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                extraBox2ActionPerformed(evt);
            }
        });
        getContentPane().add(extraBox2);
        extraBox2.setBounds(12, 315, 366, 45);

        label1.setText("label1");
        getContentPane().add(label1);
        label1.setBounds(12, 195, 366, 16);

        label2.setText("Toughness");
        getContentPane().add(label2);
        label2.setBounds(12, 286, 366, 16);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        getContentPane().add(jPanel1);
        jPanel1.setBounds(493, 0, 100, 100);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:

        Object selectedType = typeComboBox.getSelectedItem();
        selectedType.toString();

        //int selectedCost = Integer.valueOf((String)costDropDown.getSelectedItem());
        //int selectedBox1 = Integer.valueOf((String)extraBox1.getSelectedItem());
        //int selectedBox2 = Integer.valueOf((String)extraBox2.getSelectedItem());        
        
        int selectedCost = costDropDown.getSelectedIndex();    
        int selectedBox1 = extraBox1.getSelectedIndex(); 
        int selectedBox2 = extraBox2.getSelectedIndex(); 
        
        //sets value of unpecified to null, other values set to index -1 in order to set value to itself
        selectedCost -= 1;
        selectedBox1 -= 1;
        selectedBox2 -= 1;
                
        
        try{
            conn = DriverManager.getConnection(
            "jdbc:mysql://localhost/magicthegathering?" +
            "user=root&password=BeLLaceds1996&useInformationSchema=true");
            // Do something with the connection.
            stmt = conn.createStatement();
        
        
        
        
        //start of if else based on selection at button 
        if (selectedType == "Unspecified")
        {
            
            try{
                
                if(selectedCost == -1){
                    cs = conn.prepareCall("{ call SearchAllByNameAndCost(?,NULL)}");
                    cs.setString("inputName", cardNameText.getText());
                }
                else{
                    cs = conn.prepareCall("{ call SearchAllByNameAndCost(?,?)}");
                    cs.setString("inputName", cardNameText.getText());
                    cs.setInt("inputCost", selectedCost);
                }
                cs.executeQuery();
                rs = cs.getResultSet();

                while (rs.next()){
                    results.add(rs.getString("name"));
                }
                
            }catch (SQLException ex){
                Logger.getLogger(MainPage.class.getName()).log(Level.SEVERE, null, ex);

            }

        }
        if (selectedType == "Artifacts")
        {
            try{
                if(selectedCost == -1){
                    cs = conn.prepareCall("{ call ArtifactSearch(?,?,NULL)}");
                    cs.setString("inputName", cardNameText.getText());
                    cs.setString("inputSubtype", subtypeSearch.getText());
                }
                else{
                    cs = conn.prepareCall("{ call ArtifactSearch(?,?,?)}");
                    cs.setString("inputName", cardNameText.getText());
                    cs.setString("inputSubtype", subtypeSearch.getText());
                    cs.setInt("inputCost", selectedCost);                    
                }
                cs.executeQuery();
                rs = cs.getResultSet();

                while (rs.next()){
                    results.add(rs.getString("name"));
                }
                
            }catch (SQLException ex){
                Logger.getLogger(MainPage.class.getName()).log(Level.SEVERE, null, ex);

            }            
            
        }
        if (selectedType == "Creatures")
        {
            try{
                
                if(selectedCost == -1 && selectedBox1 > -1 && selectedBox2 > -1){
                    cs = conn.prepareCall("{ call CreatureSearch(?,?,NULL,?,?)}");
                    cs.setString("inputName", cardNameText.getText());
                    cs.setString("inputSubtype", subtypeSearch.getText());
                    //cs.setInt("inputCost", selectedCost);
                    cs.setInt("inputPower", selectedBox1);
                    cs.setInt("inputToughness", selectedBox2);  
                }
                else if(selectedBox1 == -1 && selectedBox2 > -1 && selectedCost > -1){
                    cs = conn.prepareCall("{ call CreatureSearch(?,?,?,NULL,?)}");
                    cs.setString("inputName", cardNameText.getText());
                    cs.setString("inputSubtype", subtypeSearch.getText());
                    cs.setInt("inputCost", selectedCost);
                    //cs.setInt("inputPower", selectedBox1);
                    cs.setInt("inputToughness", selectedBox2);                  
                }
                else if(selectedBox2 == -1 && selectedBox1 > -1 && selectedCost > -1){
                    cs = conn.prepareCall("{ call CreatureSearch(?,?,?,?,NULL)}");
                    cs.setString("inputName", cardNameText.getText());
                    cs.setString("inputSubtype", subtypeSearch.getText());
                    cs.setInt("inputCost", selectedCost);
                    cs.setInt("inputPower", selectedBox1);
                    //cs.setInt("inputToughness", selectedBox2);                     
                }
                else if(selectedCost == -1 && selectedBox1 == -1 && selectedBox2 > -1){
                    cs = conn.prepareCall("{ call CreatureSearch(?,?,NULL,NULL,?)}");
                    cs.setString("inputName", cardNameText.getText());
                    cs.setString("inputSubtype", subtypeSearch.getText());
                    //cs.setInt("inputCost", selectedCost);
                    //cs.setInt("inputPower", selectedBox1);
                    cs.setInt("inputToughness", selectedBox2);                     
                }     
                else if(selectedBox1 == -1 && selectedBox2 == -1 && selectedCost > -1){
                    cs = conn.prepareCall("{ call CreatureSearch(?,?,?,NULL,NULL)}");
                    cs.setString("inputName", cardNameText.getText());
                    cs.setString("inputSubtype", subtypeSearch.getText());
                    cs.setInt("inputCost", selectedCost);
                    //cs.setInt("inputPower", selectedBox1);
                    //cs.setInt("inputToughness", selectedBox2);                     
                }      
                else if(selectedCost == -1 && selectedBox2 == -1 && selectedBox1 > -1){
                    cs = conn.prepareCall("{ call CreatureSearch(?,?,NULL,?,NULL)}");
                    cs.setString("inputName", cardNameText.getText());
                    cs.setString("inputSubtype", subtypeSearch.getText());
                    //cs.setInt("inputCost", selectedCost);
                    cs.setInt("inputPower", selectedBox1);
                    //cs.setInt("inputToughness", selectedBox2);                     
                }                
                else if(selectedCost == -1 && selectedBox1 == -1 && selectedBox2 == -1){
                    cs = conn.prepareCall("{ call CreatureSearch(?,?,NULL,NULL,NULL)}");
                    cs.setString("inputName", cardNameText.getText());
                    cs.setString("inputSubtype", subtypeSearch.getText());
                    //cs.setInt("inputCost", selectedCost);
                    //cs.setInt("inputPower", selectedBox1);
                    //cs.setInt("inputToughness", selectedBox2);                     
                }                
                else{
                    cs = conn.prepareCall("{ call CreatureSearch(?,?,?,?,?)}");
                    cs.setString("inputName", cardNameText.getText());
                    cs.setString("inputSubtype", subtypeSearch.getText());
                    cs.setInt("inputCost", selectedCost);
                    cs.setInt("inputPower", selectedBox1);
                    cs.setInt("inputToughness", selectedBox2);                     
                }                
                cs.executeQuery();
                rs = cs.getResultSet();

                while (rs.next()){
                    results.add(rs.getString("name"));
                }
                
            }catch (SQLException ex){
                Logger.getLogger(MainPage.class.getName()).log(Level.SEVERE, null, ex);

            }       

        }
        if (selectedType == "Enchantments")
        {
            try{
                
                if(selectedCost == -1){
                    cs = conn.prepareCall("{ call SearchEnchantments(?,NULL,?)}");
                    cs.setString("inputName", cardNameText.getText());
                    cs.setString("inputSubtype", subtypeSearch.getText());
                
                }
                else{
                    cs = conn.prepareCall("{ call SearchEnchantments(?,?,?)}");
                    cs.setString("inputName", cardNameText.getText());
                    cs.setInt("inputCost", selectedCost);
                    cs.setString("inputSubtype", subtypeSearch.getText());                    
                }
                cs.executeQuery();
                rs = cs.getResultSet();

                while (rs.next()){
                    results.add(rs.getString("name"));
                }
                
            }catch (SQLException ex){
                Logger.getLogger(MainPage.class.getName()).log(Level.SEVERE, null, ex);

            }
        }
        if (selectedType == "Instants")
        {
            try{
                
                if(selectedCost == -1){
                    cs = conn.prepareCall("{ call InstantSearch(?,NULL)}");
                    cs.setString("inputName", cardNameText.getText());

                
                }
                else{
                    cs = conn.prepareCall("{ call InstantSearch(?,?)}");
                    cs.setString("inputName", cardNameText.getText());
                    cs.setInt("inputCost", selectedCost);
                 
                }
                cs.executeQuery();
                rs = cs.getResultSet();

                while (rs.next()){
                    results.add(rs.getString("name"));
                }
                
            }catch (SQLException ex){
                Logger.getLogger(MainPage.class.getName()).log(Level.SEVERE, null, ex);

            }
        }
        if (selectedType == "Lands")
        {
            try{
                    cs = conn.prepareCall("{ call LandSearch(?,?)}");
                    cs.setString("inputName", cardNameText.getText());
                    cs.setString("inputSubstype", subtypeSearch.getText());                    
                    cs.executeQuery();
                    rs = cs.getResultSet();

                    while (rs.next()){
                        results.add(rs.getString("name"));
                    }                
                
            }catch (SQLException ex){
                Logger.getLogger(MainPage.class.getName()).log(Level.SEVERE, null, ex);

            }
        }
    
        if (selectedType == "Planeswalker")
        {
            try{
                
                if(selectedCost == -1){
                    cs = conn.prepareCall("{ call PlaneswalkerSearch(?,NULL,?)}");
                    cs.setString("inputName", cardNameText.getText());
                    cs.setInt("inputLoyalty", selectedBox1);
                
                }
                if(selectedBox1 == -1){
                    cs = conn.prepareCall("{ call PlaneswalkerSearch(?,?,NULL)}");
                    cs.setString("inputName", cardNameText.getText());
                    cs.setInt("inputCost", selectedCost);
                
                }
                if(selectedCost == -1 && selectedBox1 == -1){
                    cs = conn.prepareCall("{ call PlaneswalkerSearch(?,NULL,NULL)}");
                    cs.setString("inputName", cardNameText.getText());
                
                }   
                else{
                    cs = conn.prepareCall("{ call PlaneswalkerSearch(?,?,NULL)}");
                    cs.setString("inputName", cardNameText.getText());
                    cs.setInt("inputCost", selectedCost);
                    cs.setInt("inputLoyalty", selectedBox1);
                                 
                }                
                cs.executeQuery();
                rs = cs.getResultSet();

                while (rs.next()){
                    results.add(rs.getString("name"));
                }                
            }catch (SQLException ex){
                Logger.getLogger(MainPage.class.getName()).log(Level.SEVERE, null, ex);

            }
        }
        if (selectedType == "Sorceries")
        {
            try{
                if(selectedCost == -1){
                    cs = conn.prepareCall("{ call SorcerySearch(?,NULL)}");
                    cs.setString("inputName", cardNameText.getText());
                
                }   
                else{
                    cs = conn.prepareCall("{ call SorcerySearch(?,?)}");
                    cs.setString("inputName", cardNameText.getText());
                    cs.setInt("inputCost", selectedCost);
                                
                }  
                cs.executeQuery();
                rs = cs.getResultSet();

                while (rs.next()){
                    results.add(rs.getString("name"));
                }
                
            }catch (SQLException ex){
                Logger.getLogger(MainPage.class.getName()).log(Level.SEVERE, null, ex);

            }    
            
        }  
        
        
        }catch (SQLException ex){
                System.out.println("SQLException: " + ex.getMessage());
        }
        
        this.dispose();
        new ResultsPage(results).setVisible(true);        

    }//GEN-LAST:event_jButton1ActionPerformed

    private void costDropDownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_costDropDownActionPerformed
        // TODO add your handling code here:
        costDropDown.setSize(366, 35);

        int selectedCost = Integer.valueOf((String)costDropDown.getSelectedItem());

    }//GEN-LAST:event_costDropDownActionPerformed

    private void extraBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_extraBox2ActionPerformed
        // TODO add your handling code here:
        extraBox2.setSize(366, 35);
        int selectedValue1 = Integer.valueOf((String)costDropDown.getSelectedItem());
    }//GEN-LAST:event_extraBox2ActionPerformed

    private void extraBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_extraBox1ActionPerformed
        // TODO add your handling code here:
        extraBox1.setSize(366, 35);
        int selectedValue2 = Integer.valueOf((String)costDropDown.getSelectedItem());        

    }//GEN-LAST:event_extraBox1ActionPerformed

    private void typeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_typeComboBoxActionPerformed
        // TODO add your handling code here:
        typeComboBox.setSize(366, 35);
        cardNameText.setSize(366, 35);
        costDropDown.setSize(366, 35);
        subtypeSearch.setSize(366, 35);
        extraBox1.setSize(366, 35);
        extraBox2.setSize(366, 35);

 
        Object selectedType = typeComboBox.getSelectedItem();
        selectedType.toString();
        //Unspecified, Artifacts, Creatures, Enchantments, Instants, Lands, Planeswalker, Sorceries

        if (selectedType == "Unspecified")
        {
            extraBox1.setVisible(false);
            label1.setVisible(false);
            extraBox2.setVisible(false);
            label2.setVisible(false);
            subtypeSearch.setVisible(false);

        }
        if (selectedType == "Artifacts")
        {
            extraBox1.setVisible(false);
            label1.setVisible(false);
            extraBox2.setVisible(false);
            label2.setVisible(false);            
            subtypeSearch.setVisible(true);

        }
        if (selectedType == "Creatures")
        {
            label1.setText("Power");
            label1.setVisible(true);

            label2.setText("Toughness");
            label2.setVisible(true);

            extraBox1.setVisible(true);
            extraBox2.setVisible(true);
            subtypeSearch.setVisible(true);

        }
        if (selectedType == "Enchantments")
        {
            extraBox1.setVisible(false);
            label1.setVisible(false);
            extraBox2.setVisible(false);
            label2.setVisible(false);
            subtypeSearch.setVisible(true);
        }
        if (selectedType == "Instants")
        {
            extraBox1.setVisible(false);
            label1.setVisible(false);            
            extraBox2.setVisible(false);
            label2.setVisible(false);            
            subtypeSearch.setVisible(false);
        }
        if (selectedType == "Lands")
        {
            extraBox1.setVisible(false);
            label1.setVisible(false);            
            extraBox2.setVisible(false);
            label2.setVisible(false);            
            subtypeSearch.setVisible(true);
            costDropDown.setVisible(false);
            Cost.setVisible(false);
        }
        if (selectedType == "Planeswalker")
        {
            label1.setText("Loyalty");
            label1.setVisible(true);
            extraBox1.setVisible(true);
            extraBox2.setVisible(false);
            label2.setVisible(false);            
            subtypeSearch.setVisible(true);
        }
        if (selectedType == "Sorceries")
        {
            extraBox1.setVisible(false);
            label1.setVisible(false);            
            extraBox2.setVisible(false);
            label2.setVisible(false);            
            subtypeSearch.setVisible(false);
        }

    }//GEN-LAST:event_typeComboBoxActionPerformed

    private void cardNameTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cardNameTextActionPerformed

        cardNameText.setSize(366, 35);
    }//GEN-LAST:event_cardNameTextActionPerformed

    private void cardNameTextFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cardNameTextFocusGained
        cardNameText.addMouseListener(new MouseAdapter(){
            public void mouseClicked(MouseEvent e){
                cardNameText.setText("");
            }
        });

    }//GEN-LAST:event_cardNameTextFocusGained

    private void subtypeSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_subtypeSearchActionPerformed

        subtypeSearch.setSize(366, 35);
    }//GEN-LAST:event_subtypeSearchActionPerformed

    private void subtypeSearchFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_subtypeSearchFocusGained
        subtypeSearch.addMouseListener(new MouseAdapter(){
            public void mouseClicked(MouseEvent e){
                subtypeSearch.setText("");
            }
        });

    }//GEN-LAST:event_subtypeSearchFocusGained

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainPage().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Cost;
    private javax.swing.JLabel TypeLabel;
    private javax.swing.JTextField cardNameText;
    private javax.swing.JComboBox<String> costDropDown;
    private javax.swing.JComboBox<String> extraBox1;
    private javax.swing.JComboBox<String> extraBox2;
    private javax.swing.JButton jButton1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel label1;
    private javax.swing.JLabel label2;
    private javax.swing.JTextField subtypeSearch;
    private javax.swing.JComboBox<String> typeComboBox;
    // End of variables declaration//GEN-END:variables
}
